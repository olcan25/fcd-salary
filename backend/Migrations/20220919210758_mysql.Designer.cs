// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.DataAccesses;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(SalaryContext))]
    [Migration("20220919210758_mysql")]
    partial class mysql
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("backend.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("TradeName")
                        .HasColumnType("longtext");

                    b.Property<string>("UidNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("VatNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("backend.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("backend.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("NationalId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("backend.Entities.SalaryHead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Month")
                        .HasColumnType("longtext");

                    b.Property<string>("Year")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("SalaryHeads");
                });

            modelBuilder.Entity("backend.Entities.SalaryLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("EmployeeContribute")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("EmployerContribute")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SalaryHeadId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxSalary")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("SalaryHeadId");

                    b.ToTable("SalaryLines");
                });

            modelBuilder.Entity("backend.Entities.Document", b =>
                {
                    b.HasOne("backend.Entities.Company", "Company")
                        .WithMany("Documents")
                        .HasForeignKey("CompanyId");

                    b.HasOne("backend.Entities.Employee", "Employee")
                        .WithMany("Documents")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("backend.Entities.SalaryHead", b =>
                {
                    b.HasOne("backend.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("backend.Entities.SalaryLine", b =>
                {
                    b.HasOne("backend.Entities.SalaryHead", "SalaryHead")
                        .WithMany("SalaryLines")
                        .HasForeignKey("SalaryHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalaryHead");
                });

            modelBuilder.Entity("backend.Entities.Company", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("backend.Entities.Employee", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("backend.Entities.SalaryHead", b =>
                {
                    b.Navigation("SalaryLines");
                });
#pragma warning restore 612, 618
        }
    }
}
